name: Initializr

env:
  JAVA_OPTS: "-Xms512m -Xmx6048m -Xss128m -XX:ReservedCodeCacheSize=512m -server -XX:+UseG1GC"
  GRADLE_OPTS: "-Xms512m -Xmx6048m -Xss128m -XX:ReservedCodeCacheSize=512m -server -XX:+UseG1GC"
  TERM: xterm-256color
  JDK_CURRENT: 11.0.8
  DOCKER_USER: ${{ secrets.DOCKER_USER }}
  DOCKER_PWD: ${{ secrets.DOCKER_PWD }}

##########################################################################

on:
  push:
    branches: [ heroku-casinit  ]
  pull_request:
    branches: [ heroku-casinit  ]

##########################################################################

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JDK_CURRENT }}
      - name: Build Initializr
        run: ./gradlew --build-cache --configure-on-demand --no-daemon clean build -x test -x javadoc -x check --parallel
      - uses: actions/upload-artifact@v2
        with:
          name: binary-artifacts
          path: ./**/build/libs/*.*
  validate:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JDK_CURRENT }}
      - name: Initialize
        run: chmod -R 777 ./ci/*.sh
      - uses: actions/download-artifact@v2
        with:
          name: binary-artifacts
      - name: Validate Overlay
        run: ./ci/validate.sh
  publish:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JDK_CURRENT }}
      - name: Initialize
        run: chmod -R 777 ./ci/*.sh
      - uses: actions/download-artifact@v2
        with:
          name: binary-artifacts
      - name: Build Docker Image
        run: ./gradlew bootBuildImage
      - name: Publish Docker Image
        if: ${{ github.event_name == 'push' && env.DOCKER_USER != null && env.DOCKER_PWD != null }}
        run: |
          echo "${DOCKER_PWD}" | docker login --username "$DOCKER_USER" --password-stdin
          imageTag=(`./gradlew casVersion --q`)
          echo "Pushing Docker image with tag $imageTag"
          docker push apereo/cas-initializr:"$imageTag"
  helm:
    needs: [build]
    name: Install Helm Chart
    runs-on: ubuntu-latest
    strategy:
      matrix:
        k3s-version: [v1.19.2, v1.18.9, v1.17.11, v1.16.15]
    env:
      GOPATH: /home/runner/go
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JDK_CURRENT }}
      - uses: actions/download-artifact@v2
        with:
          name: binary-artifacts
      - name: Install K3S
        env:
          INSTALL_K3S_VERSION: ${{ matrix.k3s-version }}+k3s1
        run: |
          set -x
          curl -sfL https://get.k3s.io | sh -
          sudo chmod -R a+rw /etc/rancher/k3s
          sudo mkdir -p $HOME/.kube && sudo chown -R runner $HOME/.kube
          sudo k3s kubectl config view --raw > $HOME/.kube/config
          sudo chown runner $HOME/.kube/config
          kubectl version
      - name: Add /usr/local/bin to PATH
        run: |
          echo "/usr/local/bin" >> $GITHUB_PATH
      - name: Build Docker Image and create keystore
        run: |
          ./gradlew bootBuildImage
          ./gradlew createKeystore
          kubectl create secret generic cas-server-keystore --from-file=thekeystore=/etc/cas/thekeystore
      - name: Install helm 3
        uses: azure/setup-helm@v1
        with:
          version: 'v3.4.0'
        id: install
      - name: Install helm chart
        timeout-minutes: 10
        run: |
          set -x
          cd helm
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm install --namespace ingress-nginx ingress-nginx ingress-nginx/ingress-nginx
          kubectl wait --namespace ingress-nginx \
            --for=condition=ready pod \
            --selector=app.kubernetes.io/component=controller \
            --timeout=120s
          helm upgrade --install cas-server ./cas-server
          sleep 10
          kubectl logs cas-server-0
